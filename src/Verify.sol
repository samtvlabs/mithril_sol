// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/// @notice This tests to the mithril_stm precompile. We have added the precompile to address 16 ,
/// so the aim of this is to pass the protocol paramters generated by our script to this. It will
/// have to be loaded via assembly since solidity does have have the built-in for this.
contract Verify {
    // This function takes all this parameters , coverts to it a bytes array , call calls a precompile address 16 via assembly, return true or false
    function verify_stm(uint256 m, uint256 k, uint256 phi_f, bytes memory ms, bytes memory msig)
        public
        view
        returns (bool)
    {
        bytes memory input = abi.encodePacked(m, k, phi_f, ms, msig);
        bool result;
        address stm_verify_address = address(16);

        assembly {
            let ptr := mload(0x40)
            mstore(ptr, input)
            let success := staticcall(gas(), stm_verify_address, ptr, mload(input), ptr, 32)

            if iszero(success) { revert(ptr, returndatasize()) }

            result := mload(ptr)
        }

        return result;
    }
}
